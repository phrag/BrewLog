name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_VERSION: 26.1.10909125
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          # Minimal components to build; add as needed
          packages: |
            platform-tools

      - name: Install SDK packages
        run: |
          TOOLDIR="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
          if [ ! -x "$TOOLDIR/sdkmanager" ]; then TOOLDIR="$ANDROID_SDK_ROOT/cmdline-tools/16.0/bin"; fi
          echo "y" | "$TOOLDIR/sdkmanager" --licenses > /dev/null
          "$TOOLDIR/sdkmanager" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;${{ env.ANDROID_NDK_VERSION }}" \
            "cmake;3.22.1"

      - name: Set ANDROID_NDK_HOME
        run: echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust Android target
        run: rustup target add aarch64-linux-android

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install cargo-ndk
        run: cargo install cargo-ndk --locked || true

      - name: Build native (Rust â†’ jniLibs)
        run: |
          export PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          cd rust
          cargo ndk -t arm64-v8a -o ../android/app/src/main/jniLibs build --release

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build Android (assembleDebug)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: android
          arguments: assembleDebug --no-daemon

      - name: Run Android unit tests
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: android
          arguments: testDebugUnitTest --no-daemon

      - name: Run Rust tests
        working-directory: rust
        run: cargo test --all --quiet

      - name: Rust formatting and clippy
        working-directory: rust
        run: |
          rustup component add rustfmt clippy || true
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Android Lint
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: android
          arguments: lintDebug --no-daemon

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: BrewLog-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk


